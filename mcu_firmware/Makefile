##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.10.0-B14] date: [Sun Jan 31 16:21:06 JST 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = wasca


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -O3


#######################################
# paths
#######################################
# source path
SOURCES_DIR =  \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver \
Application \
STM32CubeF4/Drivers/CMSIS \
Application/User \
STM32CubeF4/Drivers

# firmware library path
PERIFLIB_PATH = 

# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_sdmmc.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_sd.c \
Src/stm32f4xx_hal_msp.c \
Src/stm32f4xx_it.c \
Src/main.c \
Src/log.c \
Src/crc.c \
Src/spi_max10.c \
Src/bup_bootrom.c \
Src/misc_tests.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \
Src/system_stm32f4xx.c \
Src/bsp_driver_sd.c \
Src/sd_diskio.c \
Src/fatfs.c \
Src/fatfs_platform.c \
STM32CubeF4/Middlewares/Third_Party/FatFs/src/diskio.c \
STM32CubeF4/Middlewares/Third_Party/FatFs/src/ff.c \
STM32CubeF4/Middlewares/Third_Party/FatFs/src/ff_gen_drv.c \
STM32CubeF4/Middlewares/Third_Party/FatFs/src/option/syscall.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_crc.c \
Src/usb_device.c \
Src/usbd_conf.c \
Src/usbd_desc.c \
Src/usbd_cdc_if.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c \
STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c \
STM32CubeF4/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c \
STM32CubeF4/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
STM32CubeF4/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
STM32CubeF4/Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c


# ASM sources
ASM_SOURCES =  \
startup_stm32f446xx.s \
Src/recovery_rom.s


######################################
# firmware library
######################################
PERIFLIB_SOURCES = 


#######################################
# binaries
#######################################
BINPATH = 
PREFIX = arm-none-eabi-
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
AR = $(PREFIX)ar
SZ = $(PREFIX)size
GDB = $(PREFIX)gdb
# Programming tools
OPENOCD = openocd
# Filetype flags
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F446xx \
-DTARGET_STM32


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-ISTM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Inc \
-ISTM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-ISTM32CubeF4/Drivers/CMSIS/Device/ST/STM32F4xx/Include \
-ISTM32CubeF4/Drivers/CMSIS/Include \
-ISTM32CubeF4/Middlewares/Third_Party/FatFs/src \
-ISTM32CubeF4/Middlewares/ST/STM32_USB_Device_Library/Core/Inc \
-ISTM32CubeF4/Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F446RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

###############################################################################
# Upload commands
###############################################################################

OPENOCD_CFG = OpenOCD/stlink-v2.cfg
OPENOCD_TARGET_CFG = OpenOCD/stm32f4x.cfg
OPENOCD_ARGS  = -f $(OPENOCD_CFG)
OPENOCD_ARGS += -f $(OPENOCD_TARGET_CFG)
# Upload
OPENOCD_UPLOAD_CMDS  = -c init
OPENOCD_UPLOAD_CMDS += -c 'reset halt'
OPENOCD_UPLOAD_CMDS += -c 'sleep 10'
OPENOCD_UPLOAD_CMDS += -c 'flash write_image erase $(BUILD_DIR)/$(TARGET).hex'
OPENOCD_UPLOAD_CMDS += -c 'sleep 10'
OPENOCD_UPLOAD_CMDS += -c 'reset run'
OPENOCD_UPLOAD_CMDS += -c shutdown
# OpenOCD start debugging interface
OPENOCD_DEBUG_CMDS = -c init
OPENOCD_DEBUG_CMDS += -c 'halt'
OPENOCD_DEBUG_CMDS += -c 'sleep 10'
# GDB debugging commands
GDB_CMDS = -ex "target remote localhost:3333"
GDB_CMDS += -ex "file $(BUILD_DIR)/$(TARGET).elf"
GDB_CMDS += -ex "mon reset halt"
GDB_CMDS += -ex "tbreak main"
# Uncomment to allow application to run before user can attach to a GDB session
#GDB_CMDS += -ex "c"

###############################################################################
# Compilation targets
###############################################################################
# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR .dep $(BUILD_DIR)
  
# Upload program to target device
# N.B: Make sure you have permissions to access the STLink USB device
upload:
	$(OPENOCD) $(OPENOCD_ARGS) $(OPENOCD_UPLOAD_CMDS)

debug:
	$(OPENOCD) $(OPENOCD_ARGS) $(OPENOCD_DEBUG_CMDS)

run_gdb:
	$(GDB) $(GDB_ARGS) $(GDB_CMDS)

#######################################
# dependencies
#######################################
-include $(shell mkdir .dep 2>/dev/null) $(wildcard .dep/*)

# *** EOF ***
