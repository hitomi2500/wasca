// wasca_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module wasca_mm_interconnect_0 (
		input  wire        altpll_1_c0_clk,                                            //                                          altpll_1_c0.clk
		input  wire        clk_0_clk_clk,                                              //                                            clk_0_clk.clk
		input  wire        altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset, // altpll_1_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        buffered_spi_0_reset_reset_bridge_in_reset_reset,           //           buffered_spi_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset,             //             nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire [26:0] nios2_gen2_0_data_master_address,                           //                             nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,                       //                                                     .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,                        //                                                     .byteenable
		input  wire        nios2_gen2_0_data_master_read,                              //                                                     .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,                          //                                                     .readdata
		input  wire        nios2_gen2_0_data_master_write,                             //                                                     .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,                         //                                                     .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,                       //                                                     .debugaccess
		input  wire [24:0] nios2_gen2_0_instruction_master_address,                    //                      nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,                //                                                     .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,                       //                                                     .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,                   //                                                     .readdata
		output wire [7:0]  abus_avalon_sdram_bridge_0_avalon_regs_address,             //               abus_avalon_sdram_bridge_0_avalon_regs.address
		output wire        abus_avalon_sdram_bridge_0_avalon_regs_write,               //                                                     .write
		output wire        abus_avalon_sdram_bridge_0_avalon_regs_read,                //                                                     .read
		input  wire [15:0] abus_avalon_sdram_bridge_0_avalon_regs_readdata,            //                                                     .readdata
		output wire [15:0] abus_avalon_sdram_bridge_0_avalon_regs_writedata,           //                                                     .writedata
		input  wire        abus_avalon_sdram_bridge_0_avalon_regs_readdatavalid,       //                                                     .readdatavalid
		input  wire        abus_avalon_sdram_bridge_0_avalon_regs_waitrequest,         //                                                     .waitrequest
		output wire [25:0] abus_avalon_sdram_bridge_0_avalon_sdram_address,            //              abus_avalon_sdram_bridge_0_avalon_sdram.address
		output wire        abus_avalon_sdram_bridge_0_avalon_sdram_write,              //                                                     .write
		output wire        abus_avalon_sdram_bridge_0_avalon_sdram_read,               //                                                     .read
		input  wire [15:0] abus_avalon_sdram_bridge_0_avalon_sdram_readdata,           //                                                     .readdata
		output wire [15:0] abus_avalon_sdram_bridge_0_avalon_sdram_writedata,          //                                                     .writedata
		output wire [1:0]  abus_avalon_sdram_bridge_0_avalon_sdram_byteenable,         //                                                     .byteenable
		input  wire        abus_avalon_sdram_bridge_0_avalon_sdram_readdatavalid,      //                                                     .readdatavalid
		input  wire        abus_avalon_sdram_bridge_0_avalon_sdram_waitrequest,        //                                                     .waitrequest
		output wire [1:0]  altpll_1_pll_slave_address,                                 //                                   altpll_1_pll_slave.address
		output wire        altpll_1_pll_slave_write,                                   //                                                     .write
		output wire        altpll_1_pll_slave_read,                                    //                                                     .read
		input  wire [31:0] altpll_1_pll_slave_readdata,                                //                                                     .readdata
		output wire [31:0] altpll_1_pll_slave_writedata,                               //                                                     .writedata
		output wire [13:0] buffered_spi_0_avalon_address,                              //                                buffered_spi_0_avalon.address
		output wire        buffered_spi_0_avalon_write,                                //                                                     .write
		output wire        buffered_spi_0_avalon_read,                                 //                                                     .read
		input  wire [15:0] buffered_spi_0_avalon_readdata,                             //                                                     .readdata
		output wire [15:0] buffered_spi_0_avalon_writedata,                            //                                                     .writedata
		input  wire        buffered_spi_0_avalon_readdatavalid,                        //                                                     .readdatavalid
		input  wire        buffered_spi_0_avalon_waitrequest,                          //                                                     .waitrequest
		output wire [7:0]  heartbeat_0_avalon_regs_address,                            //                              heartbeat_0_avalon_regs.address
		output wire        heartbeat_0_avalon_regs_write,                              //                                                     .write
		output wire        heartbeat_0_avalon_regs_read,                               //                                                     .read
		input  wire [15:0] heartbeat_0_avalon_regs_readdata,                           //                                                     .readdata
		output wire [15:0] heartbeat_0_avalon_regs_writedata,                          //                                                     .writedata
		input  wire        heartbeat_0_avalon_regs_readdatavalid,                      //                                                     .readdatavalid
		input  wire        heartbeat_0_avalon_regs_waitrequest,                        //                                                     .waitrequest
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,                       //                         nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,                         //                                                     .write
		output wire        nios2_gen2_0_debug_mem_slave_read,                          //                                                     .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,                      //                                                     .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,                     //                                                     .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,                    //                                                     .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,                   //                                                     .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,                   //                                                     .debugaccess
		output wire [15:0] onchip_flash_0_data_address,                                //                                  onchip_flash_0_data.address
		output wire        onchip_flash_0_data_read,                                   //                                                     .read
		input  wire [31:0] onchip_flash_0_data_readdata,                               //                                                     .readdata
		output wire [3:0]  onchip_flash_0_data_burstcount,                             //                                                     .burstcount
		input  wire        onchip_flash_0_data_readdatavalid,                          //                                                     .readdatavalid
		input  wire        onchip_flash_0_data_waitrequest,                            //                                                     .waitrequest
		output wire [11:0] onchip_memory2_0_s1_address,                                //                                  onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                  //                                                     .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                               //                                                     .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                              //                                                     .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                             //                                                     .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                             //                                                     .chipselect
		output wire        onchip_memory2_0_s1_clken,                                  //                                                     .clken
		output wire [2:0]  uart_0_s1_address,                                          //                                            uart_0_s1.address
		output wire        uart_0_s1_write,                                            //                                                     .write
		output wire        uart_0_s1_read,                                             //                                                     .read
		input  wire [15:0] uart_0_s1_readdata,                                         //                                                     .readdata
		output wire [15:0] uart_0_s1_writedata,                                        //                                                     .writedata
		output wire        uart_0_s1_begintransfer,                                    //                                                     .begintransfer
		output wire        uart_0_s1_chipselect                                        //                                                     .chipselect
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [26:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [26:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire   [15:0] buffered_spi_0_avalon_agent_m0_readdata;                                            // buffered_spi_0_avalon_translator:uav_readdata -> buffered_spi_0_avalon_agent:m0_readdata
	wire          buffered_spi_0_avalon_agent_m0_waitrequest;                                         // buffered_spi_0_avalon_translator:uav_waitrequest -> buffered_spi_0_avalon_agent:m0_waitrequest
	wire          buffered_spi_0_avalon_agent_m0_debugaccess;                                         // buffered_spi_0_avalon_agent:m0_debugaccess -> buffered_spi_0_avalon_translator:uav_debugaccess
	wire   [26:0] buffered_spi_0_avalon_agent_m0_address;                                             // buffered_spi_0_avalon_agent:m0_address -> buffered_spi_0_avalon_translator:uav_address
	wire    [1:0] buffered_spi_0_avalon_agent_m0_byteenable;                                          // buffered_spi_0_avalon_agent:m0_byteenable -> buffered_spi_0_avalon_translator:uav_byteenable
	wire          buffered_spi_0_avalon_agent_m0_read;                                                // buffered_spi_0_avalon_agent:m0_read -> buffered_spi_0_avalon_translator:uav_read
	wire          buffered_spi_0_avalon_agent_m0_readdatavalid;                                       // buffered_spi_0_avalon_translator:uav_readdatavalid -> buffered_spi_0_avalon_agent:m0_readdatavalid
	wire          buffered_spi_0_avalon_agent_m0_lock;                                                // buffered_spi_0_avalon_agent:m0_lock -> buffered_spi_0_avalon_translator:uav_lock
	wire   [15:0] buffered_spi_0_avalon_agent_m0_writedata;                                           // buffered_spi_0_avalon_agent:m0_writedata -> buffered_spi_0_avalon_translator:uav_writedata
	wire          buffered_spi_0_avalon_agent_m0_write;                                               // buffered_spi_0_avalon_agent:m0_write -> buffered_spi_0_avalon_translator:uav_write
	wire    [1:0] buffered_spi_0_avalon_agent_m0_burstcount;                                          // buffered_spi_0_avalon_agent:m0_burstcount -> buffered_spi_0_avalon_translator:uav_burstcount
	wire          buffered_spi_0_avalon_agent_rf_source_valid;                                        // buffered_spi_0_avalon_agent:rf_source_valid -> buffered_spi_0_avalon_agent_rsp_fifo:in_valid
	wire   [90:0] buffered_spi_0_avalon_agent_rf_source_data;                                         // buffered_spi_0_avalon_agent:rf_source_data -> buffered_spi_0_avalon_agent_rsp_fifo:in_data
	wire          buffered_spi_0_avalon_agent_rf_source_ready;                                        // buffered_spi_0_avalon_agent_rsp_fifo:in_ready -> buffered_spi_0_avalon_agent:rf_source_ready
	wire          buffered_spi_0_avalon_agent_rf_source_startofpacket;                                // buffered_spi_0_avalon_agent:rf_source_startofpacket -> buffered_spi_0_avalon_agent_rsp_fifo:in_startofpacket
	wire          buffered_spi_0_avalon_agent_rf_source_endofpacket;                                  // buffered_spi_0_avalon_agent:rf_source_endofpacket -> buffered_spi_0_avalon_agent_rsp_fifo:in_endofpacket
	wire          buffered_spi_0_avalon_agent_rsp_fifo_out_valid;                                     // buffered_spi_0_avalon_agent_rsp_fifo:out_valid -> buffered_spi_0_avalon_agent:rf_sink_valid
	wire   [90:0] buffered_spi_0_avalon_agent_rsp_fifo_out_data;                                      // buffered_spi_0_avalon_agent_rsp_fifo:out_data -> buffered_spi_0_avalon_agent:rf_sink_data
	wire          buffered_spi_0_avalon_agent_rsp_fifo_out_ready;                                     // buffered_spi_0_avalon_agent:rf_sink_ready -> buffered_spi_0_avalon_agent_rsp_fifo:out_ready
	wire          buffered_spi_0_avalon_agent_rsp_fifo_out_startofpacket;                             // buffered_spi_0_avalon_agent_rsp_fifo:out_startofpacket -> buffered_spi_0_avalon_agent:rf_sink_startofpacket
	wire          buffered_spi_0_avalon_agent_rsp_fifo_out_endofpacket;                               // buffered_spi_0_avalon_agent_rsp_fifo:out_endofpacket -> buffered_spi_0_avalon_agent:rf_sink_endofpacket
	wire   [15:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_readdata;                           // abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_readdata -> abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_readdata
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_waitrequest;                        // abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_waitrequest -> abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_waitrequest
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_debugaccess;                        // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_debugaccess -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_debugaccess
	wire   [26:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_address;                            // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_address -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_address
	wire    [1:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_byteenable;                         // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_byteenable -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_byteenable
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_read;                               // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_read -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_read
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_readdatavalid;                      // abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_readdatavalid -> abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_readdatavalid
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_lock;                               // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_lock -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_lock
	wire   [15:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_writedata;                          // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_writedata -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_writedata
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_write;                              // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_write -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_write
	wire    [1:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_burstcount;                         // abus_avalon_sdram_bridge_0_avalon_regs_agent:m0_burstcount -> abus_avalon_sdram_bridge_0_avalon_regs_translator:uav_burstcount
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_valid;                       // abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_source_valid -> abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:in_valid
	wire   [90:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_data;                        // abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_source_data -> abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:in_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_ready;                       // abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:in_ready -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_source_ready
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_startofpacket;               // abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_source_startofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:in_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_endofpacket;                 // abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_source_endofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:in_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_valid;                    // abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:out_valid -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_sink_valid
	wire   [90:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_data;                     // abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:out_data -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_sink_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_ready;                    // abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_sink_ready -> abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:out_ready
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_startofpacket;            // abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:out_startofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_sink_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_endofpacket;              // abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo:out_endofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rf_sink_endofpacket
	wire   [15:0] heartbeat_0_avalon_regs_agent_m0_readdata;                                          // heartbeat_0_avalon_regs_translator:uav_readdata -> heartbeat_0_avalon_regs_agent:m0_readdata
	wire          heartbeat_0_avalon_regs_agent_m0_waitrequest;                                       // heartbeat_0_avalon_regs_translator:uav_waitrequest -> heartbeat_0_avalon_regs_agent:m0_waitrequest
	wire          heartbeat_0_avalon_regs_agent_m0_debugaccess;                                       // heartbeat_0_avalon_regs_agent:m0_debugaccess -> heartbeat_0_avalon_regs_translator:uav_debugaccess
	wire   [26:0] heartbeat_0_avalon_regs_agent_m0_address;                                           // heartbeat_0_avalon_regs_agent:m0_address -> heartbeat_0_avalon_regs_translator:uav_address
	wire    [1:0] heartbeat_0_avalon_regs_agent_m0_byteenable;                                        // heartbeat_0_avalon_regs_agent:m0_byteenable -> heartbeat_0_avalon_regs_translator:uav_byteenable
	wire          heartbeat_0_avalon_regs_agent_m0_read;                                              // heartbeat_0_avalon_regs_agent:m0_read -> heartbeat_0_avalon_regs_translator:uav_read
	wire          heartbeat_0_avalon_regs_agent_m0_readdatavalid;                                     // heartbeat_0_avalon_regs_translator:uav_readdatavalid -> heartbeat_0_avalon_regs_agent:m0_readdatavalid
	wire          heartbeat_0_avalon_regs_agent_m0_lock;                                              // heartbeat_0_avalon_regs_agent:m0_lock -> heartbeat_0_avalon_regs_translator:uav_lock
	wire   [15:0] heartbeat_0_avalon_regs_agent_m0_writedata;                                         // heartbeat_0_avalon_regs_agent:m0_writedata -> heartbeat_0_avalon_regs_translator:uav_writedata
	wire          heartbeat_0_avalon_regs_agent_m0_write;                                             // heartbeat_0_avalon_regs_agent:m0_write -> heartbeat_0_avalon_regs_translator:uav_write
	wire    [1:0] heartbeat_0_avalon_regs_agent_m0_burstcount;                                        // heartbeat_0_avalon_regs_agent:m0_burstcount -> heartbeat_0_avalon_regs_translator:uav_burstcount
	wire          heartbeat_0_avalon_regs_agent_rf_source_valid;                                      // heartbeat_0_avalon_regs_agent:rf_source_valid -> heartbeat_0_avalon_regs_agent_rsp_fifo:in_valid
	wire   [90:0] heartbeat_0_avalon_regs_agent_rf_source_data;                                       // heartbeat_0_avalon_regs_agent:rf_source_data -> heartbeat_0_avalon_regs_agent_rsp_fifo:in_data
	wire          heartbeat_0_avalon_regs_agent_rf_source_ready;                                      // heartbeat_0_avalon_regs_agent_rsp_fifo:in_ready -> heartbeat_0_avalon_regs_agent:rf_source_ready
	wire          heartbeat_0_avalon_regs_agent_rf_source_startofpacket;                              // heartbeat_0_avalon_regs_agent:rf_source_startofpacket -> heartbeat_0_avalon_regs_agent_rsp_fifo:in_startofpacket
	wire          heartbeat_0_avalon_regs_agent_rf_source_endofpacket;                                // heartbeat_0_avalon_regs_agent:rf_source_endofpacket -> heartbeat_0_avalon_regs_agent_rsp_fifo:in_endofpacket
	wire          heartbeat_0_avalon_regs_agent_rsp_fifo_out_valid;                                   // heartbeat_0_avalon_regs_agent_rsp_fifo:out_valid -> heartbeat_0_avalon_regs_agent:rf_sink_valid
	wire   [90:0] heartbeat_0_avalon_regs_agent_rsp_fifo_out_data;                                    // heartbeat_0_avalon_regs_agent_rsp_fifo:out_data -> heartbeat_0_avalon_regs_agent:rf_sink_data
	wire          heartbeat_0_avalon_regs_agent_rsp_fifo_out_ready;                                   // heartbeat_0_avalon_regs_agent:rf_sink_ready -> heartbeat_0_avalon_regs_agent_rsp_fifo:out_ready
	wire          heartbeat_0_avalon_regs_agent_rsp_fifo_out_startofpacket;                           // heartbeat_0_avalon_regs_agent_rsp_fifo:out_startofpacket -> heartbeat_0_avalon_regs_agent:rf_sink_startofpacket
	wire          heartbeat_0_avalon_regs_agent_rsp_fifo_out_endofpacket;                             // heartbeat_0_avalon_regs_agent_rsp_fifo:out_endofpacket -> heartbeat_0_avalon_regs_agent:rf_sink_endofpacket
	wire   [15:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_readdata;                          // abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_readdata -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_readdata
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_waitrequest;                       // abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_waitrequest -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_waitrequest
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_debugaccess;                       // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_debugaccess -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_debugaccess
	wire   [26:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_address;                           // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_address -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_address
	wire    [1:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_byteenable;                        // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_byteenable -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_byteenable
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_read;                              // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_read -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_read
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_readdatavalid;                     // abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_readdatavalid -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_readdatavalid
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_lock;                              // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_lock -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_lock
	wire   [15:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_writedata;                         // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_writedata -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_writedata
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_write;                             // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_write -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_write
	wire    [1:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_burstcount;                        // abus_avalon_sdram_bridge_0_avalon_sdram_agent:m0_burstcount -> abus_avalon_sdram_bridge_0_avalon_sdram_translator:uav_burstcount
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_valid;                      // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_source_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:in_valid
	wire   [90:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_data;                       // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_source_data -> abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:in_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_ready;                      // abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:in_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_source_ready
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_startofpacket;              // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_source_startofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:in_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_endofpacket;                // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_source_endofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:in_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_valid;                   // abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:out_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_sink_valid
	wire   [90:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_data;                    // abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:out_data -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_sink_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_ready;                   // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_sink_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:out_ready
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_startofpacket;           // abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:out_startofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_sink_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_endofpacket;             // abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo:out_endofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rf_sink_endofpacket
	wire   [31:0] onchip_flash_0_data_agent_m0_readdata;                                              // onchip_flash_0_data_translator:uav_readdata -> onchip_flash_0_data_agent:m0_readdata
	wire          onchip_flash_0_data_agent_m0_waitrequest;                                           // onchip_flash_0_data_translator:uav_waitrequest -> onchip_flash_0_data_agent:m0_waitrequest
	wire          onchip_flash_0_data_agent_m0_debugaccess;                                           // onchip_flash_0_data_agent:m0_debugaccess -> onchip_flash_0_data_translator:uav_debugaccess
	wire   [26:0] onchip_flash_0_data_agent_m0_address;                                               // onchip_flash_0_data_agent:m0_address -> onchip_flash_0_data_translator:uav_address
	wire    [3:0] onchip_flash_0_data_agent_m0_byteenable;                                            // onchip_flash_0_data_agent:m0_byteenable -> onchip_flash_0_data_translator:uav_byteenable
	wire          onchip_flash_0_data_agent_m0_read;                                                  // onchip_flash_0_data_agent:m0_read -> onchip_flash_0_data_translator:uav_read
	wire          onchip_flash_0_data_agent_m0_readdatavalid;                                         // onchip_flash_0_data_translator:uav_readdatavalid -> onchip_flash_0_data_agent:m0_readdatavalid
	wire          onchip_flash_0_data_agent_m0_lock;                                                  // onchip_flash_0_data_agent:m0_lock -> onchip_flash_0_data_translator:uav_lock
	wire   [31:0] onchip_flash_0_data_agent_m0_writedata;                                             // onchip_flash_0_data_agent:m0_writedata -> onchip_flash_0_data_translator:uav_writedata
	wire          onchip_flash_0_data_agent_m0_write;                                                 // onchip_flash_0_data_agent:m0_write -> onchip_flash_0_data_translator:uav_write
	wire    [5:0] onchip_flash_0_data_agent_m0_burstcount;                                            // onchip_flash_0_data_agent:m0_burstcount -> onchip_flash_0_data_translator:uav_burstcount
	wire          onchip_flash_0_data_agent_rf_source_valid;                                          // onchip_flash_0_data_agent:rf_source_valid -> onchip_flash_0_data_agent_rsp_fifo:in_valid
	wire  [108:0] onchip_flash_0_data_agent_rf_source_data;                                           // onchip_flash_0_data_agent:rf_source_data -> onchip_flash_0_data_agent_rsp_fifo:in_data
	wire          onchip_flash_0_data_agent_rf_source_ready;                                          // onchip_flash_0_data_agent_rsp_fifo:in_ready -> onchip_flash_0_data_agent:rf_source_ready
	wire          onchip_flash_0_data_agent_rf_source_startofpacket;                                  // onchip_flash_0_data_agent:rf_source_startofpacket -> onchip_flash_0_data_agent_rsp_fifo:in_startofpacket
	wire          onchip_flash_0_data_agent_rf_source_endofpacket;                                    // onchip_flash_0_data_agent:rf_source_endofpacket -> onchip_flash_0_data_agent_rsp_fifo:in_endofpacket
	wire          onchip_flash_0_data_agent_rsp_fifo_out_valid;                                       // onchip_flash_0_data_agent_rsp_fifo:out_valid -> onchip_flash_0_data_agent:rf_sink_valid
	wire  [108:0] onchip_flash_0_data_agent_rsp_fifo_out_data;                                        // onchip_flash_0_data_agent_rsp_fifo:out_data -> onchip_flash_0_data_agent:rf_sink_data
	wire          onchip_flash_0_data_agent_rsp_fifo_out_ready;                                       // onchip_flash_0_data_agent:rf_sink_ready -> onchip_flash_0_data_agent_rsp_fifo:out_ready
	wire          onchip_flash_0_data_agent_rsp_fifo_out_startofpacket;                               // onchip_flash_0_data_agent_rsp_fifo:out_startofpacket -> onchip_flash_0_data_agent:rf_sink_startofpacket
	wire          onchip_flash_0_data_agent_rsp_fifo_out_endofpacket;                                 // onchip_flash_0_data_agent_rsp_fifo:out_endofpacket -> onchip_flash_0_data_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> onchip_flash_0_data_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> onchip_flash_0_data_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // onchip_flash_0_data_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> onchip_flash_0_data_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> onchip_flash_0_data_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> onchip_flash_0_data_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [26:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] altpll_1_pll_slave_agent_m0_readdata;                                               // altpll_1_pll_slave_translator:uav_readdata -> altpll_1_pll_slave_agent:m0_readdata
	wire          altpll_1_pll_slave_agent_m0_waitrequest;                                            // altpll_1_pll_slave_translator:uav_waitrequest -> altpll_1_pll_slave_agent:m0_waitrequest
	wire          altpll_1_pll_slave_agent_m0_debugaccess;                                            // altpll_1_pll_slave_agent:m0_debugaccess -> altpll_1_pll_slave_translator:uav_debugaccess
	wire   [26:0] altpll_1_pll_slave_agent_m0_address;                                                // altpll_1_pll_slave_agent:m0_address -> altpll_1_pll_slave_translator:uav_address
	wire    [3:0] altpll_1_pll_slave_agent_m0_byteenable;                                             // altpll_1_pll_slave_agent:m0_byteenable -> altpll_1_pll_slave_translator:uav_byteenable
	wire          altpll_1_pll_slave_agent_m0_read;                                                   // altpll_1_pll_slave_agent:m0_read -> altpll_1_pll_slave_translator:uav_read
	wire          altpll_1_pll_slave_agent_m0_readdatavalid;                                          // altpll_1_pll_slave_translator:uav_readdatavalid -> altpll_1_pll_slave_agent:m0_readdatavalid
	wire          altpll_1_pll_slave_agent_m0_lock;                                                   // altpll_1_pll_slave_agent:m0_lock -> altpll_1_pll_slave_translator:uav_lock
	wire   [31:0] altpll_1_pll_slave_agent_m0_writedata;                                              // altpll_1_pll_slave_agent:m0_writedata -> altpll_1_pll_slave_translator:uav_writedata
	wire          altpll_1_pll_slave_agent_m0_write;                                                  // altpll_1_pll_slave_agent:m0_write -> altpll_1_pll_slave_translator:uav_write
	wire    [2:0] altpll_1_pll_slave_agent_m0_burstcount;                                             // altpll_1_pll_slave_agent:m0_burstcount -> altpll_1_pll_slave_translator:uav_burstcount
	wire          altpll_1_pll_slave_agent_rf_source_valid;                                           // altpll_1_pll_slave_agent:rf_source_valid -> altpll_1_pll_slave_agent_rsp_fifo:in_valid
	wire  [108:0] altpll_1_pll_slave_agent_rf_source_data;                                            // altpll_1_pll_slave_agent:rf_source_data -> altpll_1_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_1_pll_slave_agent_rf_source_ready;                                           // altpll_1_pll_slave_agent_rsp_fifo:in_ready -> altpll_1_pll_slave_agent:rf_source_ready
	wire          altpll_1_pll_slave_agent_rf_source_startofpacket;                                   // altpll_1_pll_slave_agent:rf_source_startofpacket -> altpll_1_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_1_pll_slave_agent_rf_source_endofpacket;                                     // altpll_1_pll_slave_agent:rf_source_endofpacket -> altpll_1_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_1_pll_slave_agent_rsp_fifo_out_valid;                                        // altpll_1_pll_slave_agent_rsp_fifo:out_valid -> altpll_1_pll_slave_agent:rf_sink_valid
	wire  [108:0] altpll_1_pll_slave_agent_rsp_fifo_out_data;                                         // altpll_1_pll_slave_agent_rsp_fifo:out_data -> altpll_1_pll_slave_agent:rf_sink_data
	wire          altpll_1_pll_slave_agent_rsp_fifo_out_ready;                                        // altpll_1_pll_slave_agent:rf_sink_ready -> altpll_1_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_1_pll_slave_agent_rsp_fifo_out_startofpacket;                                // altpll_1_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_1_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_1_pll_slave_agent_rsp_fifo_out_endofpacket;                                  // altpll_1_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_1_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_1_pll_slave_agent_rdata_fifo_src_valid;                                      // altpll_1_pll_slave_agent:rdata_fifo_src_valid -> altpll_1_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_1_pll_slave_agent_rdata_fifo_src_data;                                       // altpll_1_pll_slave_agent:rdata_fifo_src_data -> altpll_1_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_1_pll_slave_agent_rdata_fifo_src_ready;                                      // altpll_1_pll_slave_agent_rdata_fifo:in_ready -> altpll_1_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> altpll_1_pll_slave_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> altpll_1_pll_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // altpll_1_pll_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> altpll_1_pll_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> altpll_1_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> altpll_1_pll_slave_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [26:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [108:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire   [31:0] uart_0_s1_agent_m0_readdata;                                                        // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire          uart_0_s1_agent_m0_waitrequest;                                                     // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire          uart_0_s1_agent_m0_debugaccess;                                                     // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire   [26:0] uart_0_s1_agent_m0_address;                                                         // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire    [3:0] uart_0_s1_agent_m0_byteenable;                                                      // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire          uart_0_s1_agent_m0_read;                                                            // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire          uart_0_s1_agent_m0_readdatavalid;                                                   // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire          uart_0_s1_agent_m0_lock;                                                            // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire   [31:0] uart_0_s1_agent_m0_writedata;                                                       // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire          uart_0_s1_agent_m0_write;                                                           // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire    [2:0] uart_0_s1_agent_m0_burstcount;                                                      // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire          uart_0_s1_agent_rf_source_valid;                                                    // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] uart_0_s1_agent_rf_source_data;                                                     // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire          uart_0_s1_agent_rf_source_ready;                                                    // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire          uart_0_s1_agent_rf_source_startofpacket;                                            // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_0_s1_agent_rf_source_endofpacket;                                              // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_valid;                                                 // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [108:0] uart_0_s1_agent_rsp_fifo_out_data;                                                  // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire          uart_0_s1_agent_rsp_fifo_out_ready;                                                 // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire          uart_0_s1_agent_rsp_fifo_out_startofpacket;                                         // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_endofpacket;                                           // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> uart_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> uart_0_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // uart_0_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> uart_0_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [107:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          buffered_spi_0_avalon_agent_rp_valid;                                               // buffered_spi_0_avalon_agent:rp_valid -> router_002:sink_valid
	wire   [89:0] buffered_spi_0_avalon_agent_rp_data;                                                // buffered_spi_0_avalon_agent:rp_data -> router_002:sink_data
	wire          buffered_spi_0_avalon_agent_rp_ready;                                               // router_002:sink_ready -> buffered_spi_0_avalon_agent:rp_ready
	wire          buffered_spi_0_avalon_agent_rp_startofpacket;                                       // buffered_spi_0_avalon_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          buffered_spi_0_avalon_agent_rp_endofpacket;                                         // buffered_spi_0_avalon_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_valid;                              // abus_avalon_sdram_bridge_0_avalon_regs_agent:rp_valid -> router_003:sink_valid
	wire   [89:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_data;                               // abus_avalon_sdram_bridge_0_avalon_regs_agent:rp_data -> router_003:sink_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_ready;                              // router_003:sink_ready -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rp_ready
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_startofpacket;                      // abus_avalon_sdram_bridge_0_avalon_regs_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_endofpacket;                        // abus_avalon_sdram_bridge_0_avalon_regs_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          heartbeat_0_avalon_regs_agent_rp_valid;                                             // heartbeat_0_avalon_regs_agent:rp_valid -> router_004:sink_valid
	wire   [89:0] heartbeat_0_avalon_regs_agent_rp_data;                                              // heartbeat_0_avalon_regs_agent:rp_data -> router_004:sink_data
	wire          heartbeat_0_avalon_regs_agent_rp_ready;                                             // router_004:sink_ready -> heartbeat_0_avalon_regs_agent:rp_ready
	wire          heartbeat_0_avalon_regs_agent_rp_startofpacket;                                     // heartbeat_0_avalon_regs_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          heartbeat_0_avalon_regs_agent_rp_endofpacket;                                       // heartbeat_0_avalon_regs_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_valid;                             // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rp_valid -> router_005:sink_valid
	wire   [89:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_data;                              // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rp_data -> router_005:sink_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_ready;                             // router_005:sink_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rp_ready
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_startofpacket;                     // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_endofpacket;                       // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          onchip_flash_0_data_agent_rp_valid;                                                 // onchip_flash_0_data_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] onchip_flash_0_data_agent_rp_data;                                                  // onchip_flash_0_data_agent:rp_data -> router_006:sink_data
	wire          onchip_flash_0_data_agent_rp_ready;                                                 // router_006:sink_ready -> onchip_flash_0_data_agent:rp_ready
	wire          onchip_flash_0_data_agent_rp_startofpacket;                                         // onchip_flash_0_data_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          onchip_flash_0_data_agent_rp_endofpacket;                                           // onchip_flash_0_data_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_007:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_007:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          altpll_1_pll_slave_agent_rp_valid;                                                  // altpll_1_pll_slave_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] altpll_1_pll_slave_agent_rp_data;                                                   // altpll_1_pll_slave_agent:rp_data -> router_008:sink_data
	wire          altpll_1_pll_slave_agent_rp_ready;                                                  // router_008:sink_ready -> altpll_1_pll_slave_agent:rp_ready
	wire          altpll_1_pll_slave_agent_rp_startofpacket;                                          // altpll_1_pll_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          altpll_1_pll_slave_agent_rp_endofpacket;                                            // altpll_1_pll_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_009:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_009:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          uart_0_s1_agent_rp_valid;                                                           // uart_0_s1_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] uart_0_s1_agent_rp_data;                                                            // uart_0_s1_agent:rp_data -> router_010:sink_data
	wire          uart_0_s1_agent_rp_ready;                                                           // router_010:sink_ready -> uart_0_s1_agent:rp_ready
	wire          uart_0_s1_agent_rp_startofpacket;                                                   // uart_0_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          uart_0_s1_agent_rp_endofpacket;                                                     // uart_0_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          buffered_spi_0_avalon_burst_adapter_source0_valid;                                  // buffered_spi_0_avalon_burst_adapter:source0_valid -> buffered_spi_0_avalon_agent:cp_valid
	wire   [89:0] buffered_spi_0_avalon_burst_adapter_source0_data;                                   // buffered_spi_0_avalon_burst_adapter:source0_data -> buffered_spi_0_avalon_agent:cp_data
	wire          buffered_spi_0_avalon_burst_adapter_source0_ready;                                  // buffered_spi_0_avalon_agent:cp_ready -> buffered_spi_0_avalon_burst_adapter:source0_ready
	wire    [8:0] buffered_spi_0_avalon_burst_adapter_source0_channel;                                // buffered_spi_0_avalon_burst_adapter:source0_channel -> buffered_spi_0_avalon_agent:cp_channel
	wire          buffered_spi_0_avalon_burst_adapter_source0_startofpacket;                          // buffered_spi_0_avalon_burst_adapter:source0_startofpacket -> buffered_spi_0_avalon_agent:cp_startofpacket
	wire          buffered_spi_0_avalon_burst_adapter_source0_endofpacket;                            // buffered_spi_0_avalon_burst_adapter:source0_endofpacket -> buffered_spi_0_avalon_agent:cp_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_valid;                 // abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:source0_valid -> abus_avalon_sdram_bridge_0_avalon_regs_agent:cp_valid
	wire   [89:0] abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_data;                  // abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:source0_data -> abus_avalon_sdram_bridge_0_avalon_regs_agent:cp_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_ready;                 // abus_avalon_sdram_bridge_0_avalon_regs_agent:cp_ready -> abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:source0_ready
	wire    [8:0] abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_channel;               // abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:source0_channel -> abus_avalon_sdram_bridge_0_avalon_regs_agent:cp_channel
	wire          abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_startofpacket;         // abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:source0_startofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_agent:cp_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_endofpacket;           // abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:source0_endofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_agent:cp_endofpacket
	wire          heartbeat_0_avalon_regs_burst_adapter_source0_valid;                                // heartbeat_0_avalon_regs_burst_adapter:source0_valid -> heartbeat_0_avalon_regs_agent:cp_valid
	wire   [89:0] heartbeat_0_avalon_regs_burst_adapter_source0_data;                                 // heartbeat_0_avalon_regs_burst_adapter:source0_data -> heartbeat_0_avalon_regs_agent:cp_data
	wire          heartbeat_0_avalon_regs_burst_adapter_source0_ready;                                // heartbeat_0_avalon_regs_agent:cp_ready -> heartbeat_0_avalon_regs_burst_adapter:source0_ready
	wire    [8:0] heartbeat_0_avalon_regs_burst_adapter_source0_channel;                              // heartbeat_0_avalon_regs_burst_adapter:source0_channel -> heartbeat_0_avalon_regs_agent:cp_channel
	wire          heartbeat_0_avalon_regs_burst_adapter_source0_startofpacket;                        // heartbeat_0_avalon_regs_burst_adapter:source0_startofpacket -> heartbeat_0_avalon_regs_agent:cp_startofpacket
	wire          heartbeat_0_avalon_regs_burst_adapter_source0_endofpacket;                          // heartbeat_0_avalon_regs_burst_adapter:source0_endofpacket -> heartbeat_0_avalon_regs_agent:cp_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_valid;                // abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:source0_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:cp_valid
	wire   [89:0] abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_data;                 // abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:source0_data -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:cp_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_ready;                // abus_avalon_sdram_bridge_0_avalon_sdram_agent:cp_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:source0_ready
	wire    [8:0] abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_channel;              // abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:source0_channel -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:cp_channel
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_startofpacket;        // abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:source0_startofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:cp_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_endofpacket;          // abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:source0_endofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [8:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_005:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_005:sink1_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_007:sink1_valid
	wire  [107:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_007:sink1_ready -> cmd_demux_001:src2_ready
	wire    [8:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_004_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_004:src1_ready
	wire    [8:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_005_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_005:src1_ready
	wire    [8:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                           // rsp_demux_007:src1_valid -> rsp_mux_001:sink2_valid
	wire  [107:0] rsp_demux_007_src1_data;                                                            // rsp_demux_007:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_007_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_007:src1_ready
	wire    [8:0] rsp_demux_007_src1_channel;                                                         // rsp_demux_007:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_007_src1_startofpacket;                                                   // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                     // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> buffered_spi_0_avalon_rsp_width_adapter:in_valid
	wire   [89:0] router_002_src_data;                                                                // router_002:src_data -> buffered_spi_0_avalon_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                               // buffered_spi_0_avalon_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                             // router_002:src_channel -> buffered_spi_0_avalon_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> buffered_spi_0_avalon_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> buffered_spi_0_avalon_rsp_width_adapter:in_endofpacket
	wire          buffered_spi_0_avalon_rsp_width_adapter_src_valid;                                  // buffered_spi_0_avalon_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [107:0] buffered_spi_0_avalon_rsp_width_adapter_src_data;                                   // buffered_spi_0_avalon_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          buffered_spi_0_avalon_rsp_width_adapter_src_ready;                                  // rsp_demux:sink_ready -> buffered_spi_0_avalon_rsp_width_adapter:out_ready
	wire    [8:0] buffered_spi_0_avalon_rsp_width_adapter_src_channel;                                // buffered_spi_0_avalon_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          buffered_spi_0_avalon_rsp_width_adapter_src_startofpacket;                          // buffered_spi_0_avalon_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          buffered_spi_0_avalon_rsp_width_adapter_src_endofpacket;                            // buffered_spi_0_avalon_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:in_valid
	wire   [89:0] router_003_src_data;                                                                // router_003:src_data -> abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                               // abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                             // router_003:src_channel -> abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:in_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_valid;                 // abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [107:0] abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_data;                  // abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_ready;                 // rsp_demux_001:sink_ready -> abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:out_ready
	wire    [8:0] abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_channel;               // abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_startofpacket;         // abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_endofpacket;           // abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> heartbeat_0_avalon_regs_rsp_width_adapter:in_valid
	wire   [89:0] router_004_src_data;                                                                // router_004:src_data -> heartbeat_0_avalon_regs_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                               // heartbeat_0_avalon_regs_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                             // router_004:src_channel -> heartbeat_0_avalon_regs_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> heartbeat_0_avalon_regs_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> heartbeat_0_avalon_regs_rsp_width_adapter:in_endofpacket
	wire          heartbeat_0_avalon_regs_rsp_width_adapter_src_valid;                                // heartbeat_0_avalon_regs_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [107:0] heartbeat_0_avalon_regs_rsp_width_adapter_src_data;                                 // heartbeat_0_avalon_regs_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          heartbeat_0_avalon_regs_rsp_width_adapter_src_ready;                                // rsp_demux_002:sink_ready -> heartbeat_0_avalon_regs_rsp_width_adapter:out_ready
	wire    [8:0] heartbeat_0_avalon_regs_rsp_width_adapter_src_channel;                              // heartbeat_0_avalon_regs_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          heartbeat_0_avalon_regs_rsp_width_adapter_src_startofpacket;                        // heartbeat_0_avalon_regs_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          heartbeat_0_avalon_regs_rsp_width_adapter_src_endofpacket;                          // heartbeat_0_avalon_regs_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:in_valid
	wire   [89:0] router_005_src_data;                                                                // router_005:src_data -> abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                               // abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                             // router_005:src_channel -> abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:in_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_valid;                // abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [107:0] abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_data;                 // abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_ready;                // rsp_demux_003:sink_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:out_ready
	wire    [8:0] abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_channel;              // abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_startofpacket;        // abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_endofpacket;          // abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> buffered_spi_0_avalon_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> buffered_spi_0_avalon_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                  // buffered_spi_0_avalon_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> buffered_spi_0_avalon_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> buffered_spi_0_avalon_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> buffered_spi_0_avalon_cmd_width_adapter:in_endofpacket
	wire          buffered_spi_0_avalon_cmd_width_adapter_src_valid;                                  // buffered_spi_0_avalon_cmd_width_adapter:out_valid -> buffered_spi_0_avalon_burst_adapter:sink0_valid
	wire   [89:0] buffered_spi_0_avalon_cmd_width_adapter_src_data;                                   // buffered_spi_0_avalon_cmd_width_adapter:out_data -> buffered_spi_0_avalon_burst_adapter:sink0_data
	wire          buffered_spi_0_avalon_cmd_width_adapter_src_ready;                                  // buffered_spi_0_avalon_burst_adapter:sink0_ready -> buffered_spi_0_avalon_cmd_width_adapter:out_ready
	wire    [8:0] buffered_spi_0_avalon_cmd_width_adapter_src_channel;                                // buffered_spi_0_avalon_cmd_width_adapter:out_channel -> buffered_spi_0_avalon_burst_adapter:sink0_channel
	wire          buffered_spi_0_avalon_cmd_width_adapter_src_startofpacket;                          // buffered_spi_0_avalon_cmd_width_adapter:out_startofpacket -> buffered_spi_0_avalon_burst_adapter:sink0_startofpacket
	wire          buffered_spi_0_avalon_cmd_width_adapter_src_endofpacket;                            // buffered_spi_0_avalon_cmd_width_adapter:out_endofpacket -> buffered_spi_0_avalon_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                              // abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:in_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_valid;                 // abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:out_valid -> abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:sink0_valid
	wire   [89:0] abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_data;                  // abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:out_data -> abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:sink0_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_ready;                 // abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:sink0_ready -> abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:out_ready
	wire    [8:0] abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_channel;               // abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:out_channel -> abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:sink0_channel
	wire          abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_startofpacket;         // abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:out_startofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:sink0_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_endofpacket;           // abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter:out_endofpacket -> abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> heartbeat_0_avalon_regs_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> heartbeat_0_avalon_regs_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                              // heartbeat_0_avalon_regs_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> heartbeat_0_avalon_regs_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> heartbeat_0_avalon_regs_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> heartbeat_0_avalon_regs_cmd_width_adapter:in_endofpacket
	wire          heartbeat_0_avalon_regs_cmd_width_adapter_src_valid;                                // heartbeat_0_avalon_regs_cmd_width_adapter:out_valid -> heartbeat_0_avalon_regs_burst_adapter:sink0_valid
	wire   [89:0] heartbeat_0_avalon_regs_cmd_width_adapter_src_data;                                 // heartbeat_0_avalon_regs_cmd_width_adapter:out_data -> heartbeat_0_avalon_regs_burst_adapter:sink0_data
	wire          heartbeat_0_avalon_regs_cmd_width_adapter_src_ready;                                // heartbeat_0_avalon_regs_burst_adapter:sink0_ready -> heartbeat_0_avalon_regs_cmd_width_adapter:out_ready
	wire    [8:0] heartbeat_0_avalon_regs_cmd_width_adapter_src_channel;                              // heartbeat_0_avalon_regs_cmd_width_adapter:out_channel -> heartbeat_0_avalon_regs_burst_adapter:sink0_channel
	wire          heartbeat_0_avalon_regs_cmd_width_adapter_src_startofpacket;                        // heartbeat_0_avalon_regs_cmd_width_adapter:out_startofpacket -> heartbeat_0_avalon_regs_burst_adapter:sink0_startofpacket
	wire          heartbeat_0_avalon_regs_cmd_width_adapter_src_endofpacket;                          // heartbeat_0_avalon_regs_cmd_width_adapter:out_endofpacket -> heartbeat_0_avalon_regs_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                              // abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:in_endofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_valid;                // abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:out_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:sink0_valid
	wire   [89:0] abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_data;                 // abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:out_data -> abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:sink0_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_ready;                // abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:sink0_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:out_ready
	wire    [8:0] abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_channel;              // abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:out_channel -> abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:sink0_channel
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_startofpacket;        // abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:out_startofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:sink0_startofpacket
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_endofpacket;          // abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter:out_endofpacket -> abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> crosser:in_valid
	wire  [107:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> crosser:in_data
	wire          cmd_demux_src6_ready;                                                               // crosser:in_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> crosser:in_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_006:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_006:sink0_ready -> crosser:out_ready
	wire    [8:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> crosser_001:in_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> crosser_001:in_data
	wire          rsp_demux_006_src0_ready;                                                           // crosser_001:in_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> rsp_mux:sink6_valid
	wire  [107:0] crosser_001_out_data;                                                               // crosser_001:out_data -> rsp_mux:sink6_data
	wire          crosser_001_out_ready;                                                              // rsp_mux:sink6_ready -> crosser_001:out_ready
	wire    [8:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> rsp_mux:sink6_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          buffered_spi_0_avalon_agent_rdata_fifo_src_valid;                                   // buffered_spi_0_avalon_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] buffered_spi_0_avalon_agent_rdata_fifo_src_data;                                    // buffered_spi_0_avalon_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          buffered_spi_0_avalon_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter:in_0_ready -> buffered_spi_0_avalon_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> buffered_spi_0_avalon_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> buffered_spi_0_avalon_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // buffered_spi_0_avalon_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> buffered_spi_0_avalon_agent:rdata_fifo_sink_error
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_valid;                  // abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_data;                   // abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_001:in_0_ready -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> abus_avalon_sdram_bridge_0_avalon_regs_agent:rdata_fifo_sink_error
	wire          heartbeat_0_avalon_regs_agent_rdata_fifo_src_valid;                                 // heartbeat_0_avalon_regs_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [17:0] heartbeat_0_avalon_regs_agent_rdata_fifo_src_data;                                  // heartbeat_0_avalon_regs_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          heartbeat_0_avalon_regs_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_002:in_0_ready -> heartbeat_0_avalon_regs_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> heartbeat_0_avalon_regs_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> heartbeat_0_avalon_regs_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // heartbeat_0_avalon_regs_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> heartbeat_0_avalon_regs_agent:rdata_fifo_sink_error
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_valid;                 // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_data;                  // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_ready;                 // avalon_st_adapter_003:in_0_ready -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> abus_avalon_sdram_bridge_0_avalon_sdram_agent:rdata_fifo_sink_error
	wire          onchip_flash_0_data_agent_rdata_fifo_src_valid;                                     // onchip_flash_0_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] onchip_flash_0_data_agent_rdata_fifo_src_data;                                      // onchip_flash_0_data_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          onchip_flash_0_data_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_004:in_0_ready -> onchip_flash_0_data_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> onchip_flash_0_data_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> onchip_flash_0_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // onchip_flash_0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> onchip_flash_0_data_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_005:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          altpll_1_pll_slave_agent_rdata_fifo_out_valid;                                      // altpll_1_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] altpll_1_pll_slave_agent_rdata_fifo_out_data;                                       // altpll_1_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          altpll_1_pll_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_006:in_0_ready -> altpll_1_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> altpll_1_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> altpll_1_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // altpll_1_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> altpll_1_pll_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_007:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          uart_0_s1_agent_rdata_fifo_src_valid;                                               // uart_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_src_data;                                                // uart_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          uart_0_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_008:in_0_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // uart_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> uart_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (altpll_1_c0_clk),                                                             //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (25),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (altpll_1_c0_clk),                                                                    //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) buffered_spi_0_avalon_translator (
		.clk                    (altpll_1_c0_clk),                                  //                      clk.clk
		.reset                  (buffered_spi_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (buffered_spi_0_avalon_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (buffered_spi_0_avalon_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (buffered_spi_0_avalon_agent_m0_read),              //                         .read
		.uav_write              (buffered_spi_0_avalon_agent_m0_write),             //                         .write
		.uav_waitrequest        (buffered_spi_0_avalon_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (buffered_spi_0_avalon_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (buffered_spi_0_avalon_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (buffered_spi_0_avalon_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (buffered_spi_0_avalon_agent_m0_writedata),         //                         .writedata
		.uav_lock               (buffered_spi_0_avalon_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (buffered_spi_0_avalon_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (buffered_spi_0_avalon_address),                    //      avalon_anti_slave_0.address
		.av_write               (buffered_spi_0_avalon_write),                      //                         .write
		.av_read                (buffered_spi_0_avalon_read),                       //                         .read
		.av_readdata            (buffered_spi_0_avalon_readdata),                   //                         .readdata
		.av_writedata           (buffered_spi_0_avalon_writedata),                  //                         .writedata
		.av_readdatavalid       (buffered_spi_0_avalon_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (buffered_spi_0_avalon_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) abus_avalon_sdram_bridge_0_avalon_regs_translator (
		.clk                    (altpll_1_c0_clk),                                               //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_read),          //                         .read
		.uav_write              (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_write),         //                         .write
		.uav_waitrequest        (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_writedata),     //                         .writedata
		.uav_lock               (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (abus_avalon_sdram_bridge_0_avalon_regs_address),                //      avalon_anti_slave_0.address
		.av_write               (abus_avalon_sdram_bridge_0_avalon_regs_write),                  //                         .write
		.av_read                (abus_avalon_sdram_bridge_0_avalon_regs_read),                   //                         .read
		.av_readdata            (abus_avalon_sdram_bridge_0_avalon_regs_readdata),               //                         .readdata
		.av_writedata           (abus_avalon_sdram_bridge_0_avalon_regs_writedata),              //                         .writedata
		.av_readdatavalid       (abus_avalon_sdram_bridge_0_avalon_regs_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (abus_avalon_sdram_bridge_0_avalon_regs_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) heartbeat_0_avalon_regs_translator (
		.clk                    (altpll_1_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (heartbeat_0_avalon_regs_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (heartbeat_0_avalon_regs_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (heartbeat_0_avalon_regs_agent_m0_read),          //                         .read
		.uav_write              (heartbeat_0_avalon_regs_agent_m0_write),         //                         .write
		.uav_waitrequest        (heartbeat_0_avalon_regs_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (heartbeat_0_avalon_regs_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (heartbeat_0_avalon_regs_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (heartbeat_0_avalon_regs_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (heartbeat_0_avalon_regs_agent_m0_writedata),     //                         .writedata
		.uav_lock               (heartbeat_0_avalon_regs_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (heartbeat_0_avalon_regs_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (heartbeat_0_avalon_regs_address),                //      avalon_anti_slave_0.address
		.av_write               (heartbeat_0_avalon_regs_write),                  //                         .write
		.av_read                (heartbeat_0_avalon_regs_read),                   //                         .read
		.av_readdata            (heartbeat_0_avalon_regs_readdata),               //                         .readdata
		.av_writedata           (heartbeat_0_avalon_regs_writedata),              //                         .writedata
		.av_readdatavalid       (heartbeat_0_avalon_regs_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (heartbeat_0_avalon_regs_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (25),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) abus_avalon_sdram_bridge_0_avalon_sdram_translator (
		.clk                    (altpll_1_c0_clk),                                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address            (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_read),          //                         .read
		.uav_write              (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_write),         //                         .write
		.uav_waitrequest        (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_writedata),     //                         .writedata
		.uav_lock               (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (abus_avalon_sdram_bridge_0_avalon_sdram_address),                //      avalon_anti_slave_0.address
		.av_write               (abus_avalon_sdram_bridge_0_avalon_sdram_write),                  //                         .write
		.av_read                (abus_avalon_sdram_bridge_0_avalon_sdram_read),                   //                         .read
		.av_readdata            (abus_avalon_sdram_bridge_0_avalon_sdram_readdata),               //                         .readdata
		.av_writedata           (abus_avalon_sdram_bridge_0_avalon_sdram_writedata),              //                         .writedata
		.av_byteenable          (abus_avalon_sdram_bridge_0_avalon_sdram_byteenable),             //                         .byteenable
		.av_readdatavalid       (abus_avalon_sdram_bridge_0_avalon_sdram_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (abus_avalon_sdram_bridge_0_avalon_sdram_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_chipselect          (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_flash_0_data_translator (
		.clk                    (altpll_1_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_flash_0_data_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_flash_0_data_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_flash_0_data_agent_m0_read),              //                         .read
		.uav_write              (onchip_flash_0_data_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_flash_0_data_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_flash_0_data_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_flash_0_data_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_flash_0_data_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_flash_0_data_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_flash_0_data_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_flash_0_data_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_flash_0_data_address),                    //      avalon_anti_slave_0.address
		.av_read                (onchip_flash_0_data_read),                       //                         .read
		.av_readdata            (onchip_flash_0_data_readdata),                   //                         .readdata
		.av_burstcount          (onchip_flash_0_data_burstcount),                 //                         .burstcount
		.av_readdatavalid       (onchip_flash_0_data_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (onchip_flash_0_data_waitrequest),                //                         .waitrequest
		.av_write               (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (altpll_1_c0_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_1_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_1_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_1_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_1_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_1_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_1_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_1_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_1_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_1_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_1_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_1_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_1_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_1_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_1_pll_slave_write),                                   //                         .write
		.av_read                (altpll_1_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_1_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_1_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (altpll_1_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (altpll_1_c0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                        //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (uart_0_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                                //                         .write
		.av_read                (uart_0_s1_read),                                 //                         .read
		.av_readdata            (uart_0_s1_readdata),                             //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                            //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                        //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                           //                         .chipselect
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (altpll_1_c0_clk),                                                             //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (altpll_1_c0_clk),                                                                    //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) buffered_spi_0_avalon_agent (
		.clk                     (altpll_1_c0_clk),                                           //             clk.clk
		.reset                   (buffered_spi_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (buffered_spi_0_avalon_agent_m0_address),                    //              m0.address
		.m0_burstcount           (buffered_spi_0_avalon_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (buffered_spi_0_avalon_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (buffered_spi_0_avalon_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (buffered_spi_0_avalon_agent_m0_lock),                       //                .lock
		.m0_readdata             (buffered_spi_0_avalon_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (buffered_spi_0_avalon_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (buffered_spi_0_avalon_agent_m0_read),                       //                .read
		.m0_waitrequest          (buffered_spi_0_avalon_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (buffered_spi_0_avalon_agent_m0_writedata),                  //                .writedata
		.m0_write                (buffered_spi_0_avalon_agent_m0_write),                      //                .write
		.rp_endofpacket          (buffered_spi_0_avalon_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (buffered_spi_0_avalon_agent_rp_ready),                      //                .ready
		.rp_valid                (buffered_spi_0_avalon_agent_rp_valid),                      //                .valid
		.rp_data                 (buffered_spi_0_avalon_agent_rp_data),                       //                .data
		.rp_startofpacket        (buffered_spi_0_avalon_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (buffered_spi_0_avalon_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (buffered_spi_0_avalon_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (buffered_spi_0_avalon_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (buffered_spi_0_avalon_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (buffered_spi_0_avalon_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (buffered_spi_0_avalon_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (buffered_spi_0_avalon_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (buffered_spi_0_avalon_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (buffered_spi_0_avalon_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (buffered_spi_0_avalon_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (buffered_spi_0_avalon_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (buffered_spi_0_avalon_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (buffered_spi_0_avalon_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (buffered_spi_0_avalon_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (buffered_spi_0_avalon_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (buffered_spi_0_avalon_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (buffered_spi_0_avalon_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (buffered_spi_0_avalon_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (buffered_spi_0_avalon_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) buffered_spi_0_avalon_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                        //       clk.clk
		.reset             (buffered_spi_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (buffered_spi_0_avalon_agent_rf_source_data),             //        in.data
		.in_valid          (buffered_spi_0_avalon_agent_rf_source_valid),            //          .valid
		.in_ready          (buffered_spi_0_avalon_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (buffered_spi_0_avalon_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (buffered_spi_0_avalon_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (buffered_spi_0_avalon_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (buffered_spi_0_avalon_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (buffered_spi_0_avalon_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (buffered_spi_0_avalon_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (buffered_spi_0_avalon_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) abus_avalon_sdram_bridge_0_avalon_regs_agent (
		.clk                     (altpll_1_c0_clk),                                                            //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_address),                    //              m0.address
		.m0_burstcount           (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_lock),                       //                .lock
		.m0_readdata             (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_read),                       //                .read
		.m0_waitrequest          (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_writedata),                  //                .writedata
		.m0_write                (abus_avalon_sdram_bridge_0_avalon_regs_agent_m0_write),                      //                .write
		.rp_endofpacket          (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_ready),                      //                .ready
		.rp_valid                (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_valid),                      //                .valid
		.rp_data                 (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_data),                       //                .data
		.rp_startofpacket        (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                         //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_data),             //        in.data
		.in_valid          (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_valid),            //          .valid
		.in_ready          (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (abus_avalon_sdram_bridge_0_avalon_regs_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) heartbeat_0_avalon_regs_agent (
		.clk                     (altpll_1_c0_clk),                                             //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (heartbeat_0_avalon_regs_agent_m0_address),                    //              m0.address
		.m0_burstcount           (heartbeat_0_avalon_regs_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (heartbeat_0_avalon_regs_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (heartbeat_0_avalon_regs_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (heartbeat_0_avalon_regs_agent_m0_lock),                       //                .lock
		.m0_readdata             (heartbeat_0_avalon_regs_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (heartbeat_0_avalon_regs_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (heartbeat_0_avalon_regs_agent_m0_read),                       //                .read
		.m0_waitrequest          (heartbeat_0_avalon_regs_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (heartbeat_0_avalon_regs_agent_m0_writedata),                  //                .writedata
		.m0_write                (heartbeat_0_avalon_regs_agent_m0_write),                      //                .write
		.rp_endofpacket          (heartbeat_0_avalon_regs_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (heartbeat_0_avalon_regs_agent_rp_ready),                      //                .ready
		.rp_valid                (heartbeat_0_avalon_regs_agent_rp_valid),                      //                .valid
		.rp_data                 (heartbeat_0_avalon_regs_agent_rp_data),                       //                .data
		.rp_startofpacket        (heartbeat_0_avalon_regs_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (heartbeat_0_avalon_regs_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (heartbeat_0_avalon_regs_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (heartbeat_0_avalon_regs_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (heartbeat_0_avalon_regs_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (heartbeat_0_avalon_regs_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (heartbeat_0_avalon_regs_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (heartbeat_0_avalon_regs_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (heartbeat_0_avalon_regs_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (heartbeat_0_avalon_regs_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (heartbeat_0_avalon_regs_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (heartbeat_0_avalon_regs_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (heartbeat_0_avalon_regs_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (heartbeat_0_avalon_regs_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (heartbeat_0_avalon_regs_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (heartbeat_0_avalon_regs_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (heartbeat_0_avalon_regs_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (heartbeat_0_avalon_regs_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (heartbeat_0_avalon_regs_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (heartbeat_0_avalon_regs_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) heartbeat_0_avalon_regs_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (heartbeat_0_avalon_regs_agent_rf_source_data),             //        in.data
		.in_valid          (heartbeat_0_avalon_regs_agent_rf_source_valid),            //          .valid
		.in_ready          (heartbeat_0_avalon_regs_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (heartbeat_0_avalon_regs_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (heartbeat_0_avalon_regs_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (heartbeat_0_avalon_regs_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (heartbeat_0_avalon_regs_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (heartbeat_0_avalon_regs_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (heartbeat_0_avalon_regs_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (heartbeat_0_avalon_regs_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) abus_avalon_sdram_bridge_0_avalon_sdram_agent (
		.clk                     (altpll_1_c0_clk),                                                             //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_address),                    //              m0.address
		.m0_burstcount           (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_lock),                       //                .lock
		.m0_readdata             (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_read),                       //                .read
		.m0_waitrequest          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_writedata),                  //                .writedata
		.m0_write                (abus_avalon_sdram_bridge_0_avalon_sdram_agent_m0_write),                      //                .write
		.rp_endofpacket          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_ready),                      //                .ready
		.rp_valid                (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_valid),                      //                .valid
		.rp_data                 (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_data),                       //                .data
		.rp_startofpacket        (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_data),             //        in.data
		.in_valid          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_valid),            //          .valid
		.in_ready          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_flash_0_data_agent (
		.clk                     (altpll_1_c0_clk),                                      //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_flash_0_data_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_flash_0_data_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_flash_0_data_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_flash_0_data_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_flash_0_data_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_flash_0_data_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_flash_0_data_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_flash_0_data_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_flash_0_data_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_flash_0_data_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_flash_0_data_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_flash_0_data_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_flash_0_data_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_flash_0_data_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_flash_0_data_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_flash_0_data_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_flash_0_data_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_flash_0_data_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_flash_0_data_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_flash_0_data_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_flash_0_data_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_flash_0_data_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_flash_0_data_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_flash_0_data_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_flash_0_data_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_flash_0_data_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_flash_0_data_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_flash_0_data_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_flash_0_data_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_flash_0_data_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                      //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_flash_0_data_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_flash_0_data_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_flash_0_data_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_flash_0_data_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_flash_0_data_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_flash_0_data_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_flash_0_data_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_flash_0_data_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_flash_0_data_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_flash_0_data_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (altpll_1_c0_clk),                                               //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_1_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_1_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_1_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_1_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_1_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_1_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_1_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_1_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_1_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_1_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_1_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_1_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_1_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_1_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_1_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_1_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_1_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                    //                .channel
		.rf_sink_ready           (altpll_1_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_1_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_1_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_1_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_1_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_1_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_1_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_1_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_1_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_1_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (altpll_1_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_1_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_1_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_1_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_1_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_1_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_1_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_1_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_1_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_1_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_1_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_1_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_1_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_1_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_1_pll_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_1_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_1_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_1_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_1_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_1_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_1_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (altpll_1_c0_clk),                                      //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                      //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_0_s1_agent (
		.clk                     (altpll_1_c0_clk),                                //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                        //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),              //                .error
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	wasca_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                 //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	wasca_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	wasca_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (buffered_spi_0_avalon_agent_rp_ready),             //      sink.ready
		.sink_valid         (buffered_spi_0_avalon_agent_rp_valid),             //          .valid
		.sink_data          (buffered_spi_0_avalon_agent_rp_data),              //          .data
		.sink_startofpacket (buffered_spi_0_avalon_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (buffered_spi_0_avalon_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (buffered_spi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	wasca_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_ready),         //      sink.ready
		.sink_valid         (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_valid),         //          .valid
		.sink_data          (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_data),          //          .data
		.sink_startofpacket (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                               //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_003_src_ready),                                          //       src.ready
		.src_valid          (router_003_src_valid),                                          //          .valid
		.src_data           (router_003_src_data),                                           //          .data
		.src_channel        (router_003_src_channel),                                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                     //          .endofpacket
	);

	wasca_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (heartbeat_0_avalon_regs_agent_rp_ready),         //      sink.ready
		.sink_valid         (heartbeat_0_avalon_regs_agent_rp_valid),         //          .valid
		.sink_data          (heartbeat_0_avalon_regs_agent_rp_data),          //          .data
		.sink_startofpacket (heartbeat_0_avalon_regs_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (heartbeat_0_avalon_regs_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_ready),         //      sink.ready
		.sink_valid         (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_valid),         //          .valid
		.sink_data          (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_data),          //          .data
		.sink_startofpacket (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_005_src_ready),                                           //       src.ready
		.src_valid          (router_005_src_valid),                                           //          .valid
		.src_data           (router_005_src_data),                                            //          .data
		.src_channel        (router_005_src_channel),                                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                      //          .endofpacket
	);

	wasca_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (onchip_flash_0_data_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_flash_0_data_agent_rp_valid),             //          .valid
		.sink_data          (onchip_flash_0_data_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_flash_0_data_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_flash_0_data_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_007_src_ready),                                //       src.ready
		.src_valid          (router_007_src_valid),                                //          .valid
		.src_data           (router_007_src_data),                                 //          .data
		.src_channel        (router_007_src_channel),                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //          .endofpacket
	);

	wasca_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (altpll_1_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_1_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_1_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_1_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_1_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                       //       src.ready
		.src_valid          (router_008_src_valid),                                       //          .valid
		.src_data           (router_008_src_data),                                        //          .data
		.src_channel        (router_008_src_channel),                                     //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                  //          .endofpacket
	);

	wasca_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_router_008 router_010 (
		.sink_ready         (uart_0_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (uart_0_s1_agent_rp_valid),                       //          .valid
		.sink_data          (uart_0_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (uart_0_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (uart_0_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) buffered_spi_0_avalon_burst_adapter (
		.clk                   (altpll_1_c0_clk),                                           //       cr0.clk
		.reset                 (buffered_spi_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (buffered_spi_0_avalon_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (buffered_spi_0_avalon_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (buffered_spi_0_avalon_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (buffered_spi_0_avalon_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (buffered_spi_0_avalon_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (buffered_spi_0_avalon_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (buffered_spi_0_avalon_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (buffered_spi_0_avalon_burst_adapter_source0_data),          //          .data
		.source0_channel       (buffered_spi_0_avalon_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (buffered_spi_0_avalon_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (buffered_spi_0_avalon_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (buffered_spi_0_avalon_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter (
		.clk                   (altpll_1_c0_clk),                                                            //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.sink0_valid           (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_data),          //          .data
		.source0_channel       (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (abus_avalon_sdram_bridge_0_avalon_regs_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) heartbeat_0_avalon_regs_burst_adapter (
		.clk                   (altpll_1_c0_clk),                                             //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (heartbeat_0_avalon_regs_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (heartbeat_0_avalon_regs_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (heartbeat_0_avalon_regs_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (heartbeat_0_avalon_regs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (heartbeat_0_avalon_regs_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (heartbeat_0_avalon_regs_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (heartbeat_0_avalon_regs_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (heartbeat_0_avalon_regs_burst_adapter_source0_data),          //          .data
		.source0_channel       (heartbeat_0_avalon_regs_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (heartbeat_0_avalon_regs_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (heartbeat_0_avalon_regs_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (heartbeat_0_avalon_regs_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (57),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter (
		.clk                   (altpll_1_c0_clk),                                                             //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // cr0_reset.reset
		.sink0_valid           (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_data),          //          .data
		.source0_channel       (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (abus_avalon_sdram_bridge_0_avalon_sdram_burst_adapter_source0_ready)          //          .ready
	);

	wasca_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                               //      sink.ready
		.sink_channel       (router_src_channel),                             //          .channel
		.sink_data          (router_src_data),                                //          .data
		.sink_startofpacket (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_src_valid),                               //          .valid
		.src0_ready         (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //          .valid
		.src0_data          (cmd_demux_src0_data),                            //          .data
		.src0_channel       (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //          .valid
		.src1_data          (cmd_demux_src1_data),                            //          .data
		.src1_channel       (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                           //          .valid
		.src2_data          (cmd_demux_src2_data),                            //          .data
		.src2_channel       (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                           //          .valid
		.src3_data          (cmd_demux_src3_data),                            //          .data
		.src3_channel       (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                           //          .valid
		.src4_data          (cmd_demux_src4_data),                            //          .data
		.src4_channel       (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                           //          .valid
		.src5_data          (cmd_demux_src5_data),                            //          .data
		.src5_channel       (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                           //          .valid
		.src6_data          (cmd_demux_src6_data),                            //          .data
		.src6_channel       (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                           //          .valid
		.src7_data          (cmd_demux_src7_data),                            //          .data
		.src7_channel       (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                           //          .valid
		.src8_data          (cmd_demux_src8_data),                            //          .data
		.src8_channel       (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_001_src1_data),                        //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data          (cmd_demux_001_src2_data),                        //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (buffered_spi_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux_004 cmd_mux_005 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                      //          .valid
		.src_data            (cmd_mux_006_src_data),                                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                          //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                          //          .valid
		.sink0_channel       (crosser_out_channel),                                        //          .channel
		.sink0_data          (crosser_out_data),                                           //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                     //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux_004 cmd_mux_007 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                      //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_1_c0_clk),                                           //       clk.clk
		.reset              (buffered_spi_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (buffered_spi_0_avalon_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (buffered_spi_0_avalon_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (buffered_spi_0_avalon_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (buffered_spi_0_avalon_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (buffered_spi_0_avalon_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (buffered_spi_0_avalon_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (altpll_1_c0_clk),                                                            //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.sink_ready         (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                              //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (altpll_1_c0_clk),                                             //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.sink_ready         (heartbeat_0_avalon_regs_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (heartbeat_0_avalon_regs_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (heartbeat_0_avalon_regs_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (heartbeat_0_avalon_regs_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (heartbeat_0_avalon_regs_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (heartbeat_0_avalon_regs_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                               //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (altpll_1_c0_clk),                                                             //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.sink_ready         (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                               //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux_004 rsp_demux_005 (
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                       //      sink.ready
		.sink_channel       (router_008_src_channel),                                     //          .channel
		.sink_data          (router_008_src_data),                                        //          .data
		.sink_startofpacket (router_008_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_008_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                              //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux_004 rsp_demux_007 (
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_007_src1_data),                        //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (altpll_1_c0_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready         (crosser_001_out_ready),                          //     sink6.ready
		.sink6_valid         (crosser_001_out_valid),                          //          .valid
		.sink6_channel       (crosser_001_out_channel),                        //          .channel
		.sink6_data          (crosser_001_out_data),                           //          .data
		.sink6_startofpacket (crosser_001_out_startofpacket),                  //          .startofpacket
		.sink6_endofpacket   (crosser_001_out_endofpacket),                    //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	wasca_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_1_c0_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_004_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_004_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_005_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_005_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_007_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_007_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_007_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_007_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_007_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_007_src1_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (56),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (57),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (74),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) buffered_spi_0_avalon_rsp_width_adapter (
		.clk                  (altpll_1_c0_clk),                                           //       clk.clk
		.reset                (buffered_spi_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_002_src_valid),                                      //      sink.valid
		.in_channel           (router_002_src_channel),                                    //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_002_src_ready),                                      //          .ready
		.in_data              (router_002_src_data),                                       //          .data
		.out_endofpacket      (buffered_spi_0_avalon_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (buffered_spi_0_avalon_rsp_width_adapter_src_data),          //          .data
		.out_channel          (buffered_spi_0_avalon_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (buffered_spi_0_avalon_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (buffered_spi_0_avalon_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (buffered_spi_0_avalon_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (56),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (57),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (74),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter (
		.clk                  (altpll_1_c0_clk),                                                            //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (router_003_src_valid),                                                       //      sink.valid
		.in_channel           (router_003_src_channel),                                                     //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (router_003_src_ready),                                                       //          .ready
		.in_data              (router_003_src_data),                                                        //          .data
		.out_endofpacket      (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_data),          //          .data
		.out_channel          (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (abus_avalon_sdram_bridge_0_avalon_regs_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (56),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (57),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (74),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) heartbeat_0_avalon_regs_rsp_width_adapter (
		.clk                  (altpll_1_c0_clk),                                             //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (router_004_src_valid),                                        //      sink.valid
		.in_channel           (router_004_src_channel),                                      //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_004_src_ready),                                        //          .ready
		.in_data              (router_004_src_data),                                         //          .data
		.out_endofpacket      (heartbeat_0_avalon_regs_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (heartbeat_0_avalon_regs_rsp_width_adapter_src_data),          //          .data
		.out_channel          (heartbeat_0_avalon_regs_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (heartbeat_0_avalon_regs_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (heartbeat_0_avalon_regs_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (heartbeat_0_avalon_regs_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (56),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (57),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (74),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter (
		.clk                  (altpll_1_c0_clk),                                                             //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (router_005_src_valid),                                                        //      sink.valid
		.in_channel           (router_005_src_channel),                                                      //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (router_005_src_ready),                                                        //          .ready
		.in_data              (router_005_src_data),                                                         //          .data
		.out_endofpacket      (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_data),          //          .data
		.out_channel          (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (abus_avalon_sdram_bridge_0_avalon_sdram_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (74),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (75),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (56),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) buffered_spi_0_avalon_cmd_width_adapter (
		.clk                  (altpll_1_c0_clk),                                           //       clk.clk
		.reset                (buffered_spi_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                         //          .ready
		.in_data              (cmd_mux_src_data),                                          //          .data
		.out_endofpacket      (buffered_spi_0_avalon_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (buffered_spi_0_avalon_cmd_width_adapter_src_data),          //          .data
		.out_channel          (buffered_spi_0_avalon_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (buffered_spi_0_avalon_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (buffered_spi_0_avalon_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (buffered_spi_0_avalon_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (74),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (75),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (56),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter (
		.clk                  (altpll_1_c0_clk),                                                            //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                      //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                    //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                      //          .ready
		.in_data              (cmd_mux_001_src_data),                                                       //          .data
		.out_endofpacket      (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (abus_avalon_sdram_bridge_0_avalon_regs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (74),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (75),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (56),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) heartbeat_0_avalon_regs_cmd_width_adapter (
		.clk                  (altpll_1_c0_clk),                                             //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                       //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                     //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                 //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                       //          .ready
		.in_data              (cmd_mux_002_src_data),                                        //          .data
		.out_endofpacket      (heartbeat_0_avalon_regs_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (heartbeat_0_avalon_regs_cmd_width_adapter_src_data),          //          .data
		.out_channel          (heartbeat_0_avalon_regs_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (heartbeat_0_avalon_regs_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (heartbeat_0_avalon_regs_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (heartbeat_0_avalon_regs_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (74),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (75),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (56),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter (
		.clk                  (altpll_1_c0_clk),                                                             //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                                       //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                                     //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                                       //          .ready
		.in_data              (cmd_mux_003_src_data),                                                        //          .data
		.out_endofpacket      (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_data),          //          .data
		.out_channel          (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (abus_avalon_sdram_bridge_0_avalon_sdram_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                       // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_1_c0_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                              //       out_clk.clk
		.out_reset         (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                       //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                       //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                     //              .channel
		.in_data           (cmd_demux_src6_data),                                        //              .data
		.out_ready         (crosser_out_ready),                                          //           out.ready
		.out_valid         (crosser_out_valid),                                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                    //              .endofpacket
		.out_channel       (crosser_out_channel),                                        //              .channel
		.out_data          (crosser_out_data),                                           //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (9),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                              //        in_clk.clk
		.in_reset          (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_006_src0_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                      //           out.ready
		.out_valid         (crosser_001_out_valid),                                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                    //              .channel
		.out_data          (crosser_001_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	wasca_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_1_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (buffered_spi_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (buffered_spi_0_avalon_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (buffered_spi_0_avalon_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (buffered_spi_0_avalon_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                     //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (abus_avalon_sdram_bridge_0_avalon_regs_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                  //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (heartbeat_0_avalon_regs_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (heartbeat_0_avalon_regs_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (heartbeat_0_avalon_regs_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                   //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                     // in_rst_0.reset
		.in_0_data      (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (abus_avalon_sdram_bridge_0_avalon_sdram_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                   //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_flash_0_data_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_flash_0_data_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_flash_0_data_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                        //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (altpll_1_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_1_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_1_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_1_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                           //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	wasca_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_0_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (uart_0_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (uart_0_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

endmodule
